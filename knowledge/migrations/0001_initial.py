# Generated by Django 5.0.6 on 2025-09-12 11:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PatientHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='Description of the health condition (e.g., Diabetes, Hypertension)', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Patient Health Condition',
                'verbose_name_plural': 'Patient Health Conditions',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='Anomaly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hr_id', models.IntegerField(help_text='Reference ID for heart rate anomaly detection', verbose_name='Heart Rate Anomaly ID')),
                ('sp_id', models.IntegerField(help_text='Reference ID for blood oxygen anomaly detection', verbose_name='Blood Oxygen Anomaly ID')),
                ('pr_id', models.IntegerField(help_text='Reference ID for pulse rate anomaly detection', verbose_name='Pulse Rate Anomaly ID')),
                ('bt_id', models.IntegerField(help_text='Reference ID for body temperature anomaly detection', verbose_name='Body Temperature Anomaly ID')),
                ('resp_id', models.IntegerField(help_text='Reference ID for respiration rate anomaly detection', verbose_name='Respiration Anomaly ID')),
                ('status', models.BooleanField(choices=[('active', 'Active'), ('resolved', 'Resolved')], default='active', help_text='Whether this anomaly is currently active or resolved')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Anomalies',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['hr_id', 'sp_id', 'pr_id', 'bt_id', 'resp_id'], name='knowledge_a_hr_id_5509b2_idx'), models.Index(fields=['status'], name='knowledge_a_status_8d9cee_idx'), models.Index(fields=['created_at'], name='knowledge_a_created_70b192_idx')],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='Detailed description of the recommendation', max_length=200, unique=True)),
                ('reco_type', models.CharField(choices=[('Temperature', 'Temperature'), ('Spo2', 'Blood Oxygen'), ('Heart', 'Heart Rate'), ('Respiration', 'Respiration'), ('Pressure', 'Blood Pressure'), ('Other', 'Other')], help_text='Type of recommendation based on vital sign', max_length=20)),
                ('context', models.CharField(choices=[('Home', 'Home'), ('Hospital', 'Hospital'), ('Ambulatory', 'Ambulatory'), ('Any', 'Any')], default='Any', help_text='Context in which this recommendation applies', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['reco_type', 'description'],
                'indexes': [models.Index(fields=['reco_type'], name='knowledge_r_reco_ty_1a999c_idx'), models.Index(fields=['context'], name='knowledge_r_context_fb8e2e_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExceptionDisease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('health', models.ForeignKey(help_text='The health condition that triggers this exception', on_delete=django.db.models.deletion.CASCADE, related_name='exceptions', to='knowledge.patienthealth')),
                ('recommendation', models.ForeignKey(help_text='The recommendation that has an exception', on_delete=django.db.models.deletion.CASCADE, related_name='exceptions', to='knowledge.recommendation')),
            ],
            options={
                'verbose_name': 'Disease Exception',
                'verbose_name_plural': 'Disease Exceptions',
                'ordering': ['recommendation__reco_type', 'health__description'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_no', models.PositiveSmallIntegerField(default=1, help_text='The order in which this medication should be administered')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or instructions for this medication', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diagnosis', models.ForeignKey(help_text='The anomaly diagnosis this medication is for', on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='knowledge.anomaly')),
                ('user', models.ForeignKey(help_text='The healthcare provider who prescribed this medication', on_delete=django.db.models.deletion.PROTECT, related_name='medications', to=settings.AUTH_USER_MODEL)),
                ('recommendation', models.ForeignKey(help_text='The recommended treatment or medication', on_delete=django.db.models.deletion.PROTECT, related_name='medications', to='knowledge.recommendation')),
            ],
            options={
                'ordering': ['diagnosis', 'sequence_no'],
                'indexes': [models.Index(fields=['diagnosis', 'sequence_no'], name='knowledge_m_diagnos_56ee26_idx'), models.Index(fields=['sequence_no'], name='knowledge_m_sequenc_8256a9_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='medication',
            constraint=models.CheckConstraint(check=models.Q(('sequence_no__gt', 0)), name='sequence_no_positive'),
        ),
        migrations.AlterUniqueTogether(
            name='medication',
            unique_together={('diagnosis', 'recommendation')},
        ),
        migrations.AlterUniqueTogether(
            name='exceptiondisease',
            unique_together={('recommendation', 'health')},
        ),
    ]
